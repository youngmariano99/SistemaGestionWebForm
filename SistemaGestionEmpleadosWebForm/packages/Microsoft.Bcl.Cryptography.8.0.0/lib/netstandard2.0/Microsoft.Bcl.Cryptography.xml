<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Bcl.Cryptography</name>
    </assembly>
    <members>
        <member name="M:Interop.BCrypt.Emit(System.Byte[],System.Int32@,System.Byte[])">
            <summary>
                Append "value" to the data already in blob.
            </summary>
        </member>
        <member name="M:Interop.BCrypt.EmitByte(System.Byte[],System.Int32@,System.Byte,System.Int32)">
            <summary>
                Append "value" to the data already in blob.
            </summary>
        </member>
        <member name="M:Interop.BCrypt.EmitBigEndian(System.Byte[],System.Int32@,System.Int32)">
            <summary>
                Append "value" in big Endian format to the data already in blob.
            </summary>
        </member>
        <member name="M:Interop.BCrypt.Consume(System.Byte[],System.Int32@,System.Int32)">
            <summary>
                Peel off the next "count" bytes in blob and return them in a byte array.
            </summary>
        </member>
        <member name="M:Interop.BCrypt.Consume(System.ReadOnlySpan{System.Byte},System.Int32@,System.Int32)">
            <summary>
                Peel off the next "count" bytes in blob and return them in a byte array.
            </summary>
        </member>
        <member name="T:Interop.BCrypt.KeyBlobMagicNumber">
            <summary>
                Magic numbers identifying blob types
            </summary>
        </member>
        <member name="T:Interop.BCrypt.KeyBlobType">
            <summary>
                Well known key blob types
            </summary>
        </member>
        <member name="T:Interop.BCrypt.BCRYPT_RSAKEY_BLOB">
            <summary>
                The BCRYPT_RSAKEY_BLOB structure is used as a header for an RSA public key or private key BLOB in memory.
            </summary>
        </member>
        <member name="T:Interop.BCrypt.BCRYPT_DSA_KEY_BLOB">
            <summary>
                The BCRYPT_DSA_KEY_BLOB structure is used as a v1 header for a DSA public key or private key BLOB in memory.
            </summary>
        </member>
        <member name="T:Interop.BCrypt.BCRYPT_DSA_KEY_BLOB_V2">
            <summary>
                The BCRYPT_DSA_KEY_BLOB structure is used as a v2 header for a DSA public key or private key BLOB in memory.
            </summary>
        </member>
        <member name="T:Interop.BCrypt.BCRYPT_ECCKEY_BLOB">
            <summary>
                The BCRYPT_ECCKEY_BLOB structure is used as a header for an ECC public key or private key BLOB in memory.
            </summary>
        </member>
        <member name="T:Interop.BCrypt.ECC_CURVE_TYPE_ENUM">
            <summary>
                Represents the type of curve.
            </summary>
        </member>
        <member name="T:Interop.BCrypt.ECC_CURVE_ALG_ID_ENUM">
            <summary>
                Represents the algorithm that was used with Seed to generate A and B.
            </summary>
        </member>
        <member name="T:Interop.BCrypt.BCRYPT_ECCFULLKEY_BLOB">
            <summary>
                Used as a header to curve parameters including the public and potentially private key.
            </summary>
        </member>
        <member name="T:Interop.BCrypt.CngBufferDescriptors">
            <summary>
                NCrypt or BCrypt buffer descriptors
            </summary>
        </member>
        <member name="T:Interop.BCrypt.BCryptBuffer">
            <summary>
                BCrypt buffer
            </summary>
        </member>
        <member name="F:Interop.BCrypt.BCRYPTBUFFER_VERSION">
            <summary>
                The version of BCryptBuffer
            </summary>
        </member>
        <member name="T:Interop.BCrypt.BCryptBufferDesc">
            <summary>
                Contains a set of generic CNG buffers.
            </summary>
        </member>
        <member name="F:Interop.BCrypt.BCRYPT_ECC_PARAMETER_HEADER_V1">
            <summary>
                The version of BCRYPT_ECC_PARAMETER_HEADER
            </summary>
        </member>
        <member name="T:Interop.BCrypt.BCRYPT_ECC_PARAMETER_HEADER">
            <summary>
                Used as a header to curve parameters.
            </summary>
        </member>
        <member name="M:Interop.Kernel32.GetMessage(System.Int32)">
            <summary>
                Returns a string message for the specified Win32 error code.
            </summary>
        </member>
        <member name="T:System.Security.Cryptography.SP800108HmacCounterKdf">
            <summary>
              NIST SP 800-108 HMAC CTR Key-Based Key Derivation (KBKDF)
            </summary>
            <remarks>
              <para>
                This implements NIST SP 800-108 HMAC in counter mode. The implemented KDF assumes the form of
                <c>PRF (KI, [i]2 || Label || 0x00 || Context || [L]2)</c> where <c>[i]2</c> and <c>[L]2</c> are encoded as
                unsigned 32-bit integers, big endian.
              </para>
              <para>
                All members of this class are thread safe. If the instance is disposed of while other threads are using
                the instance, those threads will either receive an <see cref="T:System.ObjectDisposedException" /> or produce a valid
                derived key.
              </para>
            </remarks>
        </member>
        <member name="M:System.Security.Cryptography.SP800108HmacCounterKdf.#ctor(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName)">
            <summary>
              Initializes a new instance of <see cref="T:System.Security.Cryptography.SP800108HmacCounterKdf" /> using a specified key and HMAC algorithm.
            </summary>
            <param name="key">The key-derivation key.</param>
            <param name="hashAlgorithm">The HMAC algorithm.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="hashAlgorithm" /> has a <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> which is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="hashAlgorithm" /> has a <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> which is empty.
            </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              <paramref name="hashAlgorithm"/> is not a known or supported hash algorithm.
            </exception>
            <exception cref="T:System.PlatformNotSupportedException">
              The current platform does not have a supported implementation of HMAC.
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.SP800108HmacCounterKdf.#ctor(System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
            <summary>
              Initializes a new instance of <see cref="T:System.Security.Cryptography.SP800108HmacCounterKdf" /> using a specified key and HMAC algorithm.
            </summary>
            <param name="key">The key-derivation key.</param>
            <param name="hashAlgorithm">The HMAC algorithm.</param>
            <exception cref="T:System.ArgumentNullException">
              <para>
                <paramref name="hashAlgorithm" /> has a <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> which is <see langword="null" />.
              </para>
              <para> -or- </para>
              <para>
                <paramref name="key" /> is <see langword="null" />.
              </para>
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="hashAlgorithm" /> has a <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> which is empty.
            </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              <paramref name="hashAlgorithm"/> is not a known or supported hash algorithm.
            </exception>
            <exception cref="T:System.PlatformNotSupportedException">
              The current platform does not have a supported implementation of HMAC.
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.SP800108HmacCounterKdf.DeriveBytes(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[],System.Int32)">
            <summary>
              Derives a key of a specified length.
            </summary>
            <param name="key">The key-derivation key.</param>
            <param name="hashAlgorithm">The HMAC algorithm.</param>
            <param name="label">The label that identifies the purpose for the derived key.</param>
            <param name="context">The context containing information related to the derived key.</param>
            <param name="derivedKeyLengthInBytes">The length of the derived key, in bytes.</param>
            <returns>An array containing the derived key.</returns>
            <exception cref="T:System.ArgumentNullException">
              <para>
                <paramref name="key" /> is <see langword="null" />.
              </para>
              <para> -or- </para>
              <para>
                <paramref name="label" /> is <see langword="null" />.
              </para>
              <para> -or- </para>
              <para>
                <paramref name="context" /> is <see langword="null" />.
              </para>
              <para> -or- </para>
              <para>
                <paramref name="hashAlgorithm" /> has a <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> which is <see langword="null" />.
              </para>
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="hashAlgorithm" /> has a <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> which is empty.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="derivedKeyLengthInBytes" /> is negative or larger than the maximum number of bytes
                that can be derived.
            </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              <paramref name="hashAlgorithm"/> is not a known or supported hash algorithm.
            </exception>
            <exception cref="T:System.PlatformNotSupportedException">
              The current platform does not have a supported implementation of HMAC.
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.SP800108HmacCounterKdf.DeriveBytes(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.String,System.String,System.Int32)">
            <summary>
              Derives a key of a specified length.
            </summary>
            <param name="key">The key-derivation key.</param>
            <param name="hashAlgorithm">The HMAC algorithm.</param>
            <param name="label">The label that identifies the purpose for the derived key.</param>
            <param name="context">The context containing information related to the derived key.</param>
            <param name="derivedKeyLengthInBytes">The length of the derived key, in bytes.</param>
            <returns>An array containing the derived key.</returns>
            <exception cref="T:System.ArgumentNullException">
              <para>
                <paramref name="key" /> is <see langword="null" />.
              </para>
              <para> -or- </para>
              <para>
                <paramref name="label" /> is <see langword="null" />.
              </para>
              <para> -or- </para>
              <para>
                <paramref name="context" /> is <see langword="null" />.
              </para>
              <para> -or- </para>
              <para>
                <paramref name="hashAlgorithm" /> has a <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> which is <see langword="null" />.
              </para>
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="hashAlgorithm" /> has a <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> which is empty.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="derivedKeyLengthInBytes" /> is negative or larger than the maximum number of bytes
                that can be derived.
            </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              <paramref name="hashAlgorithm"/> is not a known or supported hash algorithm.
            </exception>
            <exception cref="T:System.Text.EncoderFallbackException">
              <paramref name="label" /> or <paramref name="context" /> contains text that cannot be converted to UTF-8.
            </exception>
            <remarks>
              <paramref name="label" /> and <paramref name="context" /> will be converted to bytes using the UTF-8 encoding.
              for other encodings, perform the conversion using the desired encoding and use an overload which accepts the
              label and context as a sequence of bytes.
            </remarks>
            <exception cref="T:System.PlatformNotSupportedException">
              The current platform does not have a supported implementation of HMAC.
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.SP800108HmacCounterKdf.DeriveBytes(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Int32)">
            <summary>
              Derives a key of a specified length.
            </summary>
            <param name="key">The key-derivation key.</param>
            <param name="hashAlgorithm">The HMAC algorithm.</param>
            <param name="label">The label that identifies the purpose for the derived key.</param>
            <param name="context">The context containing information related to the derived key.</param>
            <param name="derivedKeyLengthInBytes">The length of the derived key, in bytes.</param>
            <returns>An array containing the derived key.</returns>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="hashAlgorithm" /> has a <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> which is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="hashAlgorithm" /> has a <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> which is empty.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="derivedKeyLengthInBytes" /> is negative or larger than the maximum number of bytes
                that can be derived.
            </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              <paramref name="hashAlgorithm"/> is not a known or supported hash algorithm.
            </exception>
            <exception cref="T:System.PlatformNotSupportedException">
              The current platform does not have a supported implementation of HMAC.
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.SP800108HmacCounterKdf.DeriveBytes(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
            <summary>
              Fills a buffer with a derived key.
            </summary>
            <param name="key">The key-derivation key.</param>
            <param name="hashAlgorithm">The HMAC algorithm.</param>
            <param name="label">The label that identifies the purpose for the derived key.</param>
            <param name="context">The context containing information related to the derived key.</param>
            <param name="destination">The buffer which will receive the derived key.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="hashAlgorithm" /> has a <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> which is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="hashAlgorithm" /> has a <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> which is empty.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="destination" /> is larger than the maximum number of bytes that can be derived.
            </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              <paramref name="hashAlgorithm"/> is not a known or supported hash algorithm.
            </exception>
            <exception cref="T:System.PlatformNotSupportedException">
              The current platform does not have a supported implementation of HMAC.
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.SP800108HmacCounterKdf.DeriveBytes(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Int32)">
            <summary>
              Derives a key of a specified length.
            </summary>
            <param name="key">The key-derivation key.</param>
            <param name="hashAlgorithm">The HMAC algorithm.</param>
            <param name="label">The label that identifies the purpose for the derived key.</param>
            <param name="context">The context containing information related to the derived key.</param>
            <param name="derivedKeyLengthInBytes">The length of the derived key, in bytes.</param>
            <returns>An array containing the derived key.</returns>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="hashAlgorithm" /> has a <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> which is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="hashAlgorithm" /> has a <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> which is empty.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="derivedKeyLengthInBytes" /> is negative or larger than the maximum number of bytes
              that can be derived.
            </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              <paramref name="hashAlgorithm"/> is not a known or supported hash algorithm.
            </exception>
            <exception cref="T:System.Text.EncoderFallbackException">
              <paramref name="label" /> or <paramref name="context" /> contains text that cannot be converted to UTF-8.
            </exception>
            <exception cref="T:System.PlatformNotSupportedException">
              The current platform does not have a supported implementation of HMAC.
            </exception>
            <remarks>
              <paramref name="label" /> and <paramref name="context" /> will be converted to bytes using the UTF-8 encoding.
              for other encodings, perform the conversion using the desired encoding and use an overload which accepts the
              label and context as a sequence of bytes.
            </remarks>
        </member>
        <member name="M:System.Security.Cryptography.SP800108HmacCounterKdf.DeriveBytes(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Span{System.Byte})">
            <summary>
              Fills a buffer with a derived key.
            </summary>
            <param name="key">The key-derivation key.</param>
            <param name="hashAlgorithm">The HMAC algorithm.</param>
            <param name="label">The label that identifies the purpose for the derived key.</param>
            <param name="context">The context containing information related to the derived key.</param>
            <param name="destination">The buffer which will receive the derived key.</param>
            <exception cref="T:System.ArgumentNullException">
              <paramref name="hashAlgorithm" /> has a <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> which is <see langword="null" />.
            </exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="hashAlgorithm" /> has a <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> which is empty.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="destination" /> is larger than the maximum number of bytes that can be derived.
            </exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">
              <paramref name="hashAlgorithm"/> is not a known or supported hash algorithm.
            </exception>
            <exception cref="T:System.Text.EncoderFallbackException">
              <paramref name="label" /> or <paramref name="context" /> contains text that cannot be converted to UTF-8.
            </exception>
            <exception cref="T:System.PlatformNotSupportedException">
              The current platform does not have a supported implementation of HMAC.
            </exception>
            <remarks>
              <paramref name="label" /> and <paramref name="context" /> will be converted to bytes using the UTF-8 encoding.
              for other encodings, perform the conversion using the desired encoding and use an overload which accepts the
              label and context as a sequence of bytes.
            </remarks>
        </member>
        <member name="M:System.Security.Cryptography.SP800108HmacCounterKdf.DeriveKey(System.Byte[],System.Byte[],System.Int32)">
            <summary>
              Derives a key of a specified length.
            </summary>
            <param name="label">The label that identifies the purpose for the derived key.</param>
            <param name="context">The context containing information related to the derived key.</param>
            <param name="derivedKeyLengthInBytes">The length of the derived key, in bytes.</param>
            <returns>An array containing the derived key.</returns>
            <exception cref="T:System.ArgumentNullException">
              <para>
                <paramref name="label" /> is <see langword="null" />.
              </para>
              <para> -or- </para>
              <para>
                <paramref name="context" /> is <see langword="null" />.
              </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="derivedKeyLengthInBytes" /> is negative or larger than the maximum number of bytes
              that can be derived.
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.SP800108HmacCounterKdf.DeriveKey(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Int32)">
            <summary>
              Derives a key of a specified length.
            </summary>
            <param name="label">The label that identifies the purpose for the derived key.</param>
            <param name="context">The context containing information related to the derived key.</param>
            <param name="derivedKeyLengthInBytes">The length of the derived key, in bytes.</param>
            <returns>An array containing the derived key.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="derivedKeyLengthInBytes" /> is negative or larger than the maximum number of bytes
              that can be derived.
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.SP800108HmacCounterKdf.DeriveKey(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
            <summary>
              Fills a buffer with a derived key.
            </summary>
            <param name="label">The label that identifies the purpose for the derived key.</param>
            <param name="context">The context containing information related to the derived key.</param>
            <param name="destination">The buffer which will receive the derived key.</param>
            <exception cref="T:System.ArgumentNullException">
              <para>
                <paramref name="label" /> is <see langword="null" />.
              </para>
              <para> -or- </para>
              <para>
                <paramref name="context" /> is <see langword="null" />.
              </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="destination" /> is larger than the maximum number of bytes that can be derived.
            </exception>
        </member>
        <member name="M:System.Security.Cryptography.SP800108HmacCounterKdf.DeriveKey(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Int32)">
            <summary>
              Derives a key of a specified length.
            </summary>
            <param name="label">The label that identifies the purpose for the derived key.</param>
            <param name="context">The context containing information related to the derived key.</param>
            <param name="derivedKeyLengthInBytes">The length of the derived key, in bytes.</param>
            <returns>An array containing the derived key.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="derivedKeyLengthInBytes" /> is negative or larger than the maximum number of bytes
              that can be derived.
            </exception>
            <exception cref="T:System.Text.EncoderFallbackException">
              <paramref name="label" /> or <paramref name="context" /> contains text that cannot be converted to UTF-8.
            </exception>
            <remarks>
              <paramref name="label" /> and <paramref name="context" /> will be converted to bytes using the UTF-8 encoding.
              for other encodings, perform the conversion using the desired encoding and use an overload which accepts the
              label and context as a sequence of bytes.
            </remarks>
        </member>
        <member name="M:System.Security.Cryptography.SP800108HmacCounterKdf.DeriveKey(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Span{System.Byte})">
            <summary>
              Fills a buffer with a derived key.
            </summary>
            <param name="label">The label that identifies the purpose for the derived key.</param>
            <param name="context">The context containing information related to the derived key.</param>
            <param name="destination">The buffer which will receive the derived key.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="destination" /> is larger than the maximum number of bytes that can be derived.
            </exception>
            <exception cref="T:System.Text.EncoderFallbackException">
              <paramref name="label" /> or <paramref name="context" /> contains text that cannot be converted to UTF-8.
            </exception>
            <remarks>
              <paramref name="label" /> and <paramref name="context" /> will be converted to bytes using the UTF-8 encoding.
              for other encodings, perform the conversion using the desired encoding and use an overload which accepts the
              label and context as a sequence of bytes.
            </remarks>
        </member>
        <member name="M:System.Security.Cryptography.SP800108HmacCounterKdf.DeriveKey(System.String,System.String,System.Int32)">
            <summary>
              Derives a key of a specified length.
            </summary>
            <param name="label">The label that identifies the purpose for the derived key.</param>
            <param name="context">The context containing information related to the derived key.</param>
            <param name="derivedKeyLengthInBytes">The length of the derived key, in bytes.</param>
            <returns>An array containing the derived key.</returns>
            <exception cref="T:System.ArgumentNullException">
              <para>
                <paramref name="label" /> is <see langword="null" />.
              </para>
              <para> -or- </para>
              <para>
                <paramref name="context" /> is <see langword="null" />.
              </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="derivedKeyLengthInBytes" /> is negative or larger than the maximum number of bytes
              that can be derived.
            </exception>
            <exception cref="T:System.Text.EncoderFallbackException">
              <paramref name="label" /> or <paramref name="context" /> contains text that cannot be converted to UTF-8.
            </exception>
            <remarks>
              <paramref name="label" /> and <paramref name="context" /> will be converted to bytes using the UTF-8 encoding.
              for other encodings, perform the conversion using the desired encoding and use an overload which accepts the
              label and context as a sequence of bytes.
            </remarks>
        </member>
        <member name="M:System.Security.Cryptography.SP800108HmacCounterKdf.Dispose">
            <summary>
              Releases all resources used by the current instance of <see cref="T:System.Security.Cryptography.SP800108HmacCounterKdf"/>.
            </summary>
        </member>
        <member name="P:System.SR.ArgumentOutOfRange_NeedNonNegNum">
            <summary>Non-negative number required.</summary>
        </member>
        <member name="P:System.SR.ArgumentOutOfRange_KOut_Too_Large">
            <summary>The number of bytes requested is too large. The number of bytes produced by SP800108HmacCounterKdf cannot exceed 536,870,911 bytes.</summary>
        </member>
        <member name="P:System.SR.Argument_EmptyString">
            <summary>The value cannot be an empty string.</summary>
        </member>
        <member name="P:System.SR.Cryptography_UnknownHashAlgorithm">
            <summary>'{0}' is not a known hash algorithm.</summary>
        </member>
        <member name="T:System.Runtime.InteropServices.LibraryImportAttribute">
            <summary>
            Attribute used to indicate a source generator should create a function for marshalling
            arguments instead of relying on the runtime to generate an equivalent marshalling function at run-time.
            </summary>
            <remarks>
            This attribute is meaningless if the source generator associated with it is not enabled.
            The current built-in source generator only supports C# and only supplies an implementation when
            applied to static, partial, non-generic methods.
            </remarks>
        </member>
        <member name="M:System.Runtime.InteropServices.LibraryImportAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.LibraryImportAttribute"/>.
            </summary>
            <param name="libraryName">Name of the library containing the import.</param>
        </member>
        <member name="P:System.Runtime.InteropServices.LibraryImportAttribute.LibraryName">
            <summary>
            Gets the name of the library containing the import.
            </summary>
        </member>
        <member name="P:System.Runtime.InteropServices.LibraryImportAttribute.EntryPoint">
            <summary>
            Gets or sets the name of the entry point to be called.
            </summary>
        </member>
        <member name="P:System.Runtime.InteropServices.LibraryImportAttribute.StringMarshalling">
            <summary>
            Gets or sets how to marshal string arguments to the method.
            </summary>
            <remarks>
            If this field is set to a value other than <see cref="F:System.Runtime.InteropServices.StringMarshalling.Custom" />,
            <see cref="P:System.Runtime.InteropServices.LibraryImportAttribute.StringMarshallingCustomType" /> must not be specified.
            </remarks>
        </member>
        <member name="P:System.Runtime.InteropServices.LibraryImportAttribute.StringMarshallingCustomType">
            <summary>
            Gets or sets the <see cref="T:System.Type"/> used to control how string arguments to the method are marshalled.
            </summary>
            <remarks>
            If this field is specified, <see cref="P:System.Runtime.InteropServices.LibraryImportAttribute.StringMarshalling" /> must not be specified
            or must be set to <see cref="F:System.Runtime.InteropServices.StringMarshalling.Custom" />.
            </remarks>
        </member>
        <member name="P:System.Runtime.InteropServices.LibraryImportAttribute.SetLastError">
            <summary>
            Gets or sets whether the callee sets an error (SetLastError on Windows or errno
            on other platforms) before returning from the attributed method.
            </summary>
        </member>
        <member name="T:System.Runtime.InteropServices.StringMarshalling">
            <summary>
            Specifies how strings should be marshalled for generated p/invokes
            </summary>
        </member>
        <member name="F:System.Runtime.InteropServices.StringMarshalling.Custom">
            <summary>
            Indicates the user is suppling a specific marshaller in <see cref="P:System.Runtime.InteropServices.LibraryImportAttribute.StringMarshallingCustomType"/>.
            </summary>
        </member>
        <member name="F:System.Runtime.InteropServices.StringMarshalling.Utf8">
            <summary>
            Use the platform-provided UTF-8 marshaller.
            </summary>
        </member>
        <member name="F:System.Runtime.InteropServices.StringMarshalling.Utf16">
            <summary>
            Use the platform-provided UTF-16 marshaller.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>Specifies that null is allowed as an input even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>Specifies that null is disallowed as an input even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>Specifies that an output may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>Specifies that an output will not be null even if the corresponding type allows it. Specifies that an input argument was not null when the call returns.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>, the parameter may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter may be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>, the parameter will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>Specifies that the output will be non-null if the named parameter is non-null.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with the associated parameter name.</summary>
            <param name="parameterName">
            The associated parameter name.  The output will be non-null if the argument to the parameter specified is non-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>Gets the associated parameter name.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>Applied to a method that will never return under any circumstance.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>Specifies that the method will not return if the associated Boolean parameter is passed the specified value.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified parameter value.</summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable by diagnostics if the argument to
            the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>Gets the condition parameter value.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with a field or property member.</summary>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>Initializes the attribute with the list of field and property members.</summary>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values when returning with the specified return value condition.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>Initializes the attribute with the specified return value condition and a field or property member.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>Initializes the attribute with the specified return value condition and list of field and property members.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
    </members>
</doc>
